@model ProductionManagementSystem.Core.Models.AltiumDB.Projects.Project

@{
  ViewBag.Title = Model.Name + " " + Model.Variant;
  Layout = "_AltiumDBLayout";
}

<div class="bx--grid">
  <div class="bx--row bx--row-padding">
    <div class="bx--col bx--col--auto">
      <h1>
        @Model.Name
      </h1>
    </div>
  </div>
  <div class="bx--row bx--row-padding">
    <div class="bx--col-md-3">
      <img src="@Model.ImagePath" class="altiumdb--entity--image"/>
    </div>
    <div class="bx--col-md-3">
      <div id="model" style="width: 400px; height: 400px"> </div>
    </div>
    <div class="bx--col-md-2 hidden-print">
      <div class="bx--grid">
        <div class="bx--row">
          <div class="bx--col-lg-5">
            <strong>Print version</strong>
          </div>
          <div class="bx--col-lg-7">
            <a asp-controller="Projects" asp-action="PrintVersion" asp-route-id="@Model.Id" target="_blank">Print version</a>
          </div>
        </div>
        <div class="bx--row" style="height: 10px"></div>
        <div class="bx--row">
          <div class="bx--col-lg-5">
            <strong>Bill of matirial</strong>
          </div>
          <div class="bx--col-lg-7">
            <a href="@Model.BOMFilePath" target="_blank">@Model.Name bom file</a>
          </div>
        </div>
        <div class="bx--row" style="height: 10px"></div>
        <div class="bx--row">
          <div class="bx--col-lg-5">
            <strong>Assembly drawing</strong>
          </div>
          <div class="bx--col-lg-7">
            <a href="@Model.AssemblyDrawingPath" target="_blank">@Model.Name assembly drawing</a>
          </div>
        </div>
        <div class="bx--row" style="height: 10px"></div>
        <div class="bx--row">
          <div class="bx--col-lg-5">
            <strong>Circuit diagram</strong>
          </div>
          <div class="bx--col-lg-7">
            <a href="@Model.CircuitDiagramPath" target="_blank">@Model.Name circuit diagram</a>
          </div>
        </div>
        <div class="bx--row" style="height: 10px"></div>
      </div>
    </div>
  </div>
  <div class="bx--row bx--row-padding">
    <partial name="Partail/Projects/ProjectComponents" model="@Model"/>
  </div>
</div>

@section Scripts
{
  <script src="/js/three.min.js"></script>
  <script src="/js/STLLoader.js"></script>
  <script src="/js/OrbitControls.js"></script>
  <script>
  
  function STLViewer(model, elementID) {
      var elem = document.getElementById(elementID);
      
      var camera = new THREE.PerspectiveCamera(70, 
          elem.clientWidth/elem.clientHeight, 1, 1000);
      
      var renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });
      renderer.setSize(elem.clientWidth, elem.clientHeight);
      elem.appendChild(renderer.domElement);
      window.addEventListener('resize', function () {
          renderer.setSize(elem.clientWidth, elem.clientHeight);
          camera.aspect = elem.clientWidth/elem.clientHeight;
          camera.updateProjectionMatrix();
      }, false);
      
      var controls = new THREE.OrbitControls(camera, renderer.domElement);
      controls.enableDamping = true;
      controls.rotateSpeed = 0.4;
      controls.dampingFactor = 0.4;
      controls.enableZoom = true;
      controls.autoRotate = true;
      controls.autoRotateSpeed = .75;
      
      var scene = new THREE.Scene();
      const light = new THREE.PointLight( 0xffffff, 0.75, 100 );
      light.position.set( 25, 25, 25 );
      scene.add(light);
      const light1 = new THREE.PointLight( 0xffffff, 0.25, 100 );
            light1.position.set( 25, 25, -25 );
            scene.add(light1);
      scene.add(new THREE.AmbientLight(0xffffff, 1.5));
      (new THREE.STLLoader()).load(model, function (geometry) {
          var material = new THREE.MeshPhongMaterial({ 
              color: 0x6c6c6c, 
              specular: 100, 
              shininess: 100 });
          var mesh = new THREE.Mesh(geometry, material);
              scene.add(mesh);
              
      var middle = new THREE.Vector3();
      geometry.computeBoundingBox();
      geometry.boundingBox.getCenter(middle);
      mesh.geometry.applyMatrix(new THREE.Matrix4().makeTranslation( 
                                    -middle.x, -middle.y, -middle.z ) );
      var largestDimension = Math.max(geometry.boundingBox.max.x,
                                  geometry.boundingBox.max.y, 
                                  geometry.boundingBox.max.z)
      camera.position.z = largestDimension * 2;
      
      var animate = function () {
            requestAnimationFrame(animate);
            controls.update();
            renderer.render(scene, camera);
        }; 
      
       animate();
          });
  }
  </script>
  <script type="text/javascript">
      window.onload = function() {
          STLViewer("@Model.ThreeDModelPath", "model")
      }
  </script>
}